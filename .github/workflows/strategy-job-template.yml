# strategy-job-template.yml

# Define the strategy job template
name: Strategy Job Template
runs-on: ubuntu-latest
inputs:
  feature_folder:
    description: 'The path to the folder containing .feature files.'
    required: true

  device_list:
    description: 'List of devices for strategies. (Optional)'
    required: false
    default: 'device1, device2'

  project:
    description: 'The name of the project.'
    required: true

  custom_id:
    description: 'Custom ID for the repository.'
    required: false
    default: ${{ github.repository }}

steps:
  - name: Checkout code
    uses: actions/checkout@v2

  # Create JSON file for strategies
  - name: Create JSON files
    run: |
      json="{"

      # Include the devices block if devices are provided
      if [ "${{ inputs.device_list }}" != "none" ]; then
        json+="\"devices\": [${{ inputs.device_list }}], "
      fi

      # Add additional keys outside the shard block
      json+="\"project\": \"${{ inputs.project }}\", \"custom_id\": \"${{ inputs.custom_id }}\", "

      # Calculate the number of strategies (5 or 3) based on the total file count
      total_files=$(find ${{ inputs.feature_folder }} -type f -name "*.feature" | wc -l)
      if [[ $total_files -gt 10 ]]; then
        strategies=5
      elif [[ $total_files -gt 3 ]]; then
        strategies=3
      else
        strategies=1
      fi

      # Calculate the maximum number of files per strategy
      max_files_per_strategy=$(( (total_files + strategies - 1) / strategies ))

      # Include the shard block
      json+="\"strategies\": ["

      shard_counter=1
      current_files=0
      for strategy in $(seq 1 $strategies); do
        json+="{"
        json+="\"name\": \"Shard $strategy\", "
        json+="\"strategy\": \"Cucumber\", "

        # Loop through the feature files and append them to the strategy
        json+="\"values\": {\"features\": ["
        while IFS= read -r feature_file; do
          json+="\"$feature_file\","
          ((current_files++))

          # Check if the current strategy reaches the maximum files per strategy
          if [[ $current_files -eq $max_files_per_strategy ]]; then
            break
          fi
        done < <(find ${{ inputs.feature_folder }} ! -type d -type f -name "*.feature" -print)

        json="${json::-1}"  # Remove the trailing comma
        json+="]},"
        current_files=0

