# .github/workflows/main.yml

name: My CI/CD Workflow

on:
  push:
    branches:
      - '*' # Run on every push to any branch
  pull_request:

jobs:
  strategy_job:
    name: Create Strategy Config
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Debug Feature Folder Contents
        run: |
          echo "Checking contents of the feature folder..."
          ls ${{ inputs.feature_folder }}

      - name: Create JSON files
        run: |
          # Create an empty array to store strategy objects
          strategies=()

          # Calculate the number of strategies (5 or 3) based on the total file count
          total_files=$(find ${{ inputs.feature_folder }} -type f -name "*.feature" | wc -l)
          if [[ $total_files -gt 10 ]]; then
            strategies=5
          elif [[ $total_files -gt 3 ]]; then
            strategies=3
          else
            strategies=1
          fi

          # Calculate the number of files for each strategy and the remaining files
          files_per_strategy=$(( total_files / strategies ))
          remaining_files=$(( total_files % strategies ))

          # Increment max_files_per_strategy by 1 if the remainder is greater than 0
          max_files_per_strategy=$(( files_per_strategy + (remaining_files > 0 ? 1 : 0) ))

          # Initialize the strategy and current files list
          current_strategy=1
          current_files=()

          # Loop through the files and create strategies using Round Robin logic
          for file in $(find ${{ inputs.feature_folder }} -type f -name "*.feature"); do
            # Add the file to the current strategy's files list
            current_files+=("$file")

            # Check if it's time to create a new strategy
            if [[ ${#current_files[@]} -eq $max_files_per_strategy ]]; then
              # Convert current_files array to a comma-separated string
              files_string=$(printf "\"%s\"," "${current_files[@]}")
              files_string=${files_string%,}  # Remove the trailing comma

              # Create the strategy object and add it to the array
              strategy_object="{\"name\": \"Shard $current_strategy\", \"strategy\": \"Cucumber\", \"values\": {\"features\": [$files_string]}}"
              strategies+=("$strategy_object")

              # Reset the current_files list for the next strategy
              current_files=()

              # Increment the current strategy index using Round Robin
              current_strategy=$(( (current_strategy % strategies) + 1 ))
            fi
          done

          # Handle any remaining files for the last strategy
          if [[ ${#current_files[@]} -gt 0 ]]; then
            # Convert current_files array to a comma-separated string
            files_string=$(printf "\"%s\"," "${current_files[@]}")
            files_string=${files_string%,}  # Remove the trailing comma

            # Create the strategy object for the last strategy and add it to the array
            strategy_object="{\"name\": \"Shard $current_strategy\", \"strategy\": \"Cucumber\", \"values\": {\"features\": [$files_string]}}"
            strategies+=("$strategy_object")
          fi

          # Construct the JSON output with the strategies array
          json="{"

          # Include the devices block if devices are provided or use a default value
          if [ -n "${{ inputs.device_list }}" ]; then
            json+="\"devices\": [${{ inputs.device_list }}], "
          else
            json+="\"devices\": [\"device1\", \"device2\"], "  # Default device list
          fi

          # Add additional keys outside the shard block
          json+="\"project\": \"${{ inputs.project }}\", "
          json+="\"custom_id\": \"${{ inputs.custom_id }}\", "
          json+="\"locale\": \"en-GB\", "

          json+="\"mapping\": $(
            echo "${strategies[@]}" | jq -s '.'  # Convert strategies array to JSON
          ), "

          json+="\"numberOfShard\": $strategies, "  # Number of strategies
          json+="\"deviceSelection\": \"any\""   # Device selection

          json+="}"

          # Save JSON to a file named config.json in the .github folder
          echo "$json" > .github/config.json

      - name: Show Config JSON
        run: cat .github/config.json
